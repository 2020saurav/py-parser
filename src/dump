PLY: PARSE DEBUG START

State  : 0
Stack  : . LexToken(FOR,'for',1,0)
Action : Shift and goto state 23

State  : 23
Stack  : FOR . LexToken(NAME,'index',1,4)
Action : Shift and goto state 50

State  : 50
Stack  : FOR NAME . LexToken(IN,'in',1,10)
Action : Shift and goto state 73

State  : 73
Stack  : FOR NAME IN . LexToken(NAME,'range',1,13)
Action : Shift and goto state 31

State  : 31
Stack  : FOR NAME IN NAME . LexToken(LPAREN,'(',1,18)
Action : Reduce rule [atom -> NAME] with ['range'] and goto state 56
Result : <NoneType @ 0x8b8800> (None)

State  : 13
Stack  : FOR NAME IN atom . LexToken(LPAREN,'(',1,18)
Action : Shift and goto state 46

State  : 46
Stack  : FOR NAME IN atom LPAREN . LexToken(NUMBER,10,1,19)
Action : Shift and goto state 38

State  : 38
Stack  : FOR NAME IN atom LPAREN NUMBER . LexToken(COMMA,',',1,21)
Action : Reduce rule [atom -> NUMBER] with [10] and goto state 57
Result : <NoneType @ 0x8b8800> (None)

State  : 13
Stack  : FOR NAME IN atom LPAREN atom . LexToken(COMMA,',',1,21)
Action : Reduce rule [power -> atom] with [None] and goto state 54
Result : <NoneType @ 0x8b8800> (None)

State  : 16
Stack  : FOR NAME IN atom LPAREN power . LexToken(COMMA,',',1,21)
Action : Reduce rule [comparison -> power] with [None] and goto state 53
Result : <NoneType @ 0x8b8800> (None)

State  : 32
Stack  : FOR NAME IN atom LPAREN comparison . LexToken(COMMA,',',1,21)
Action : Reduce rule [test -> comparison] with [None] and goto state 65
Result : <NoneType @ 0x8b8800> (None)

State  : 70
Stack  : FOR NAME IN atom LPAREN test . LexToken(COMMA,',',1,21)
Action : Reduce rule [argument -> test] with [None] and goto state 68
Result : <NoneType @ 0x8b8800> (None)

State  : 69
Stack  : FOR NAME IN atom LPAREN argument . LexToken(COMMA,',',1,21)
Action : Reduce rule [arglist -> argument] with [None] and goto state 67
Result : <NoneType @ 0x8b8800> (None)

State  : 71
Stack  : FOR NAME IN atom LPAREN arglist . LexToken(COMMA,',',1,21)
Action : Shift and goto state 92

State  : 92
Stack  : FOR NAME IN atom LPAREN arglist COMMA . LexToken(NUMBER,25,1,22)
Action : Shift and goto state 38

State  : 38
Stack  : FOR NAME IN atom LPAREN arglist COMMA NUMBER . LexToken(RPAREN,')',1,24)
Action : Reduce rule [atom -> NUMBER] with [25] and goto state 57
Result : <NoneType @ 0x8b8800> (None)

State  : 13
Stack  : FOR NAME IN atom LPAREN arglist COMMA atom . LexToken(RPAREN,')',1,24)
Action : Reduce rule [power -> atom] with [None] and goto state 54
Result : <NoneType @ 0x8b8800> (None)

State  : 16
Stack  : FOR NAME IN atom LPAREN arglist COMMA power . LexToken(RPAREN,')',1,24)
Action : Reduce rule [comparison -> power] with [None] and goto state 53
Result : <NoneType @ 0x8b8800> (None)

State  : 32
Stack  : FOR NAME IN atom LPAREN arglist COMMA comparison . LexToken(RPAREN,')',1,24)
Action : Reduce rule [test -> comparison] with [None] and goto state 65
Result : <NoneType @ 0x8b8800> (None)

State  : 70
Stack  : FOR NAME IN atom LPAREN arglist COMMA test . LexToken(RPAREN,')',1,24)
Action : Reduce rule [argument -> test] with [None] and goto state 68
Result : <NoneType @ 0x8b8800> (None)

State  : 101
Stack  : FOR NAME IN atom LPAREN arglist COMMA argument . LexToken(RPAREN,')',1,24)
Action : Reduce rule [arglist -> arglist COMMA argument] with [None,',',None] and goto state 66
Result : <NoneType @ 0x8b8800> (None)

State  : 71
Stack  : FOR NAME IN atom LPAREN arglist . LexToken(RPAREN,')',1,24)
Action : Shift and goto state 93

State  : 93
Stack  : FOR NAME IN atom LPAREN arglist RPAREN . LexToken(COLON,':',1,25)
Action : Reduce rule [trailer -> LPAREN arglist RPAREN] with ['(',None,')'] and goto state 60
Result : <NoneType @ 0x8b8800> (None)

State  : 47
Stack  : FOR NAME IN atom trailer . LexToken(COLON,':',1,25)
Action : Reduce rule [power -> atom trailer] with [None,None] and goto state 55
Result : <NoneType @ 0x8b8800> (None)

State  : 16
Stack  : FOR NAME IN power . LexToken(COLON,':',1,25)
Action : Reduce rule [comparison -> power] with [None] and goto state 53
Result : <NoneType @ 0x8b8800> (None)

State  : 32
Stack  : FOR NAME IN comparison . LexToken(COLON,':',1,25)
Action : Reduce rule [test -> comparison] with [None] and goto state 65
Result : <NoneType @ 0x8b8800> (None)

State  : 95
Stack  : FOR NAME IN test . LexToken(COLON,':',1,25)
Action : Shift and goto state 104

State  : 104
Stack  : FOR NAME IN test COLON . LexToken(NEWLINE,'\n',1,26)
Action : Shift and goto state 85

State  : 85
Stack  : FOR NAME IN test COLON NEWLINE . LexToken(INDENT,None,2,-100)
Action : Shift and goto state 96

State  : 96
Stack  : FOR NAME IN test COLON NEWLINE INDENT . LexToken(PRINT,'print',2,28)
Action : Shift and goto state 7

State  : 7
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT . LexToken(NAME,'factorial',2,34)
Action : Shift and goto state 31

State  : 31
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT NAME . LexToken(LPAREN,'(',2,43)
Action : Reduce rule [atom -> NAME] with ['factorial'] and goto state 56
Result : <NoneType @ 0x8b8800> (None)

State  : 13
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom . LexToken(LPAREN,'(',2,43)
Action : Shift and goto state 46

State  : 46
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN . LexToken(NAME,'index',2,44)
Action : Shift and goto state 31

State  : 31
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN NAME . LexToken(RPAREN,')',2,49)
Action : Reduce rule [atom -> NAME] with ['index'] and goto state 56
Result : <NoneType @ 0x8b8800> (None)

State  : 13
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN atom . LexToken(RPAREN,')',2,49)
Action : Reduce rule [power -> atom] with [None] and goto state 54
Result : <NoneType @ 0x8b8800> (None)

State  : 16
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN power . LexToken(RPAREN,')',2,49)
Action : Reduce rule [comparison -> power] with [None] and goto state 53
Result : <NoneType @ 0x8b8800> (None)

State  : 32
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN comparison . LexToken(RPAREN,')',2,49)
Action : Reduce rule [test -> comparison] with [None] and goto state 65
Result : <NoneType @ 0x8b8800> (None)

State  : 70
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN test . LexToken(RPAREN,')',2,49)
Action : Reduce rule [argument -> test] with [None] and goto state 68
Result : <NoneType @ 0x8b8800> (None)

State  : 69
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN argument . LexToken(RPAREN,')',2,49)
Action : Reduce rule [arglist -> argument] with [None] and goto state 67
Result : <NoneType @ 0x8b8800> (None)

State  : 71
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN arglist . LexToken(RPAREN,')',2,49)
Action : Shift and goto state 93

State  : 93
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom LPAREN arglist RPAREN . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [trailer -> LPAREN arglist RPAREN] with ['(',None,')'] and goto state 60
Result : <NoneType @ 0x8b8800> (None)

State  : 47
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT atom trailer . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [power -> atom trailer] with [None,None] and goto state 55
Result : <NoneType @ 0x8b8800> (None)

State  : 16
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT power . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [comparison -> power] with [None] and goto state 53
Result : <NoneType @ 0x8b8800> (None)

State  : 32
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT comparison . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [test -> comparison] with [None] and goto state 65
Result : <NoneType @ 0x8b8800> (None)

State  : 42
Stack  : FOR NAME IN test COLON NEWLINE INDENT PRINT test . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [print_stmt -> PRINT test] with ['print',None] and goto state 20
Result : <NoneType @ 0x8b8800> (None)

State  : 17
Stack  : FOR NAME IN test COLON NEWLINE INDENT print_stmt . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [small_stmt -> print_stmt] with [None] and goto state 14
Result : <NoneType @ 0x8b8800> (None)

State  : 2
Stack  : FOR NAME IN test COLON NEWLINE INDENT small_stmt . LexToken(NEWLINE,'\n',2,50)
Action : Reduce rule [small_stmts -> small_stmt] with [None] and goto state 11
Result : <NoneType @ 0x8b8800> (None)

State  : 37
Stack  : FOR NAME IN test COLON NEWLINE INDENT small_stmts . LexToken(NEWLINE,'\n',2,50)
Action : Shift and goto state 63

State  : 63
Stack  : FOR NAME IN test COLON NEWLINE INDENT small_stmts NEWLINE . LexToken(DEDENT,None,2,-100)
Action : Reduce rule [simple_stmt -> small_stmts NEWLINE] with [None,'\n'] and goto state 8
Result : <NoneType @ 0x8b8800> (None)

State  : 24
Stack  : FOR NAME IN test COLON NEWLINE INDENT simple_stmt . LexToken(DEDENT,None,2,-100)
Action : Reduce rule [stmt -> simple_stmt] with [None] and goto state 6
Result : <NoneType @ 0x8b8800> (None)

State  : 106
Stack  : FOR NAME IN test COLON NEWLINE INDENT stmt . LexToken(DEDENT,None,2,-100)
Action : Reduce rule [stmts -> stmt] with [None] and goto state 38
Result : <NoneType @ 0x8b8800> (None)

State  : 105
Stack  : FOR NAME IN test COLON NEWLINE INDENT stmts . LexToken(DEDENT,None,2,-100)
Action : Shift and goto state 112

State  : 112
Stack  : FOR NAME IN test COLON NEWLINE INDENT stmts DEDENT . LexToken(ENDMARKER,None,2,-100)
Action : Reduce rule [suite -> NEWLINE INDENT stmts DEDENT] with ['\n',None,None,None] and goto state 36
Result : <NoneType @ 0x8b8800> (None)

State  : 111
Stack  : FOR NAME IN test COLON suite . LexToken(ENDMARKER,None,2,-100)
Action : Reduce rule [for_stmt -> FOR NAME IN test COLON suite] with ['for','index','in',None,':',None] and goto state 32
Result : <NoneType @ 0x8b8800> (None)

State  : 27
Stack  : for_stmt . LexToken(ENDMARKER,None,2,-100)
Action : Reduce rule [compound_stmt -> for_stmt] with [None] and goto state 25
Result : <NoneType @ 0x8b8800> (None)

State  : 21
Stack  : compound_stmt . LexToken(ENDMARKER,None,2,-100)
Action : Reduce rule [stmt -> compound_stmt] with [None] and goto state 7
Result : <NoneType @ 0x8b8800> (None)

State  : 26
Stack  : stmt . LexToken(ENDMARKER,None,2,-100)
Action : Reduce rule [file_input -> stmt] with [None] and goto state 5
Result : <NoneType @ 0x8b8800> (None)

State  : 34
Stack  : file_input . LexToken(ENDMARKER,None,2,-100)
Action : Shift and goto state 60

State  : 60
Stack  : file_input ENDMARKER . $end
Action : Reduce rule [program -> file_input ENDMARKER] with [None,None] and goto state 1
Result : <NoneType @ 0x8b8800> (None)

State  : 18
Stack  : program . $end
Done   : Returning <NoneType @ 0x8b8800> (None)
PLY: PARSE DEBUG END