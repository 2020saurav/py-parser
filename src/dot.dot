digraph G 
{

	node0 [label="program"];
	node1 [label= "single_stmt"];
	node0 -> node1;
	node2 [label= "ENDMARKER"];
	node0 -> node2;
	node3 [label= "single_stmt"];
	node1 -> node3;
	node4 [label= "stmt"];
	node1 -> node4;
	node5 [label= "simple_stmt"];
	node4 -> node5;
	node6 [label= "small_stmts"];
	node5 -> node6;
	node7 [label= "NEWLINE\n'\n'"];
	node5 -> node7;
	node8 [label= "small_stmt"];
	node6 -> node8;
	node9 [label= "expr_stmt"];
	node8 -> node9;
	node10 [label= "testlist"];
	node9 -> node10;
	node11 [label= "eqtestlist"];
	node9 -> node11;
	node12 [label= "<empty>\n"];
	node11 -> node12;
	node13 [label= "test"];
	node12 -> node13;
	node14 [label= "or_test"];
	node13 -> node14;
	node15 [label= "and_test"];
	node14 -> node15;
	node16 [label= "ortestlist"];
	node14 -> node16;
	node17 [label= "<empty>\n"];
	node16 -> node17;
	node18 [label= "not_test"];
	node17 -> node18;
	node19 [label= "andtestlist"];
	node17 -> node19;
	node20 [label= "<empty>\n"];
	node19 -> node20;
	node21 [label= "comparison"];
	node20 -> node21;
	node22 [label= "expr"];
	node21 -> node22;
	node23 [label= "compexprlist"];
	node21 -> node23;
	node24 [label= "<empty>\n"];
	node23 -> node24;
	node25 [label= "xor_expr"];
	node24 -> node25;
	node26 [label= "xorexprlist"];
	node24 -> node26;
	node27 [label= "<empty>\n"];
	node26 -> node27;
	node28 [label= "and_expr"];
	node27 -> node28;
	node29 [label= "andexprlist"];
	node27 -> node29;
	node30 [label= "<empty>\n"];
	node29 -> node30;
	node31 [label= "shift_expr"];
	node30 -> node31;
	node32 [label= "shiftexprlist"];
	node30 -> node32;
	node33 [label= "<empty>\n"];
	node32 -> node33;
	node34 [label= "arith_expr"];
	node33 -> node34;
	node35 [label= "arithexprlist"];
	node33 -> node35;
	node36 [label= "<empty>\n"];
	node35 -> node36;
	node37 [label= "term"];
	node36 -> node37;
	node38 [label= "termlist"];
	node36 -> node38;
	node39 [label= "<empty>\n"];
	node38 -> node39;
	node40 [label= "factor"];
	node39 -> node40;
	node41 [label= "factorlist"];
	node39 -> node41;
	node42 [label= "<empty>\n"];
	node41 -> node42;
	node43 [label= "power"];
	node42 -> node43;
	node44 [label= "atom"];
	node43 -> node44;
	node45 [label= "trailerlist"];
	node43 -> node45;
	node46 [label= "trailer"];
	node45 -> node46;
	node47 [label= "trailerlist"];
	node45 -> node47;
	node48 [label= "<empty>\n"];
	node47 -> node48;
	node49 [label= "LPAREN\n'('"];
	node48 -> node49;
	node50 [label= "arglist"];
	node48 -> node50;
	node51 [label= "RPAREN\n')'"];
	node48 -> node51;
	node52 [label= "argument"];
	node50 -> node52;
	node53 [label= "COMMA\n'"];
	node50 -> node53;
	node54 [label= "arglist\n'"];
	node50 -> node54;
	node55 [label= "argument"];
	node54 -> node55;
	node56 [label= "test"];
	node55 -> node56;
	node57 [label= "or_test"];
	node56 -> node57;
	node58 [label= "and_test"];
	node57 -> node58;
	node59 [label= "ortestlist"];
	node57 -> node59;
	node60 [label= "<empty>\n"];
	node59 -> node60;
	node61 [label= "not_test"];
	node60 -> node61;
	node62 [label= "andtestlist"];
	node60 -> node62;
	node63 [label= "<empty>\n"];
	node62 -> node63;
	node64 [label= "comparison"];
	node63 -> node64;
	node65 [label= "expr"];
	node64 -> node65;
	node66 [label= "compexprlist"];
	node64 -> node66;
	node67 [label= "<empty>\n"];
	node66 -> node67;
	node68 [label= "xor_expr"];
	node67 -> node68;
	node69 [label= "xorexprlist"];
	node67 -> node69;
	node70 [label= "<empty>\n"];
	node69 -> node70;
	node71 [label= "and_expr"];
	node70 -> node71;
	node72 [label= "andexprlist"];
	node70 -> node72;
	node73 [label= "<empty>\n"];
	node72 -> node73;
	node74 [label= "shift_expr"];
	node73 -> node74;
	node75 [label= "shiftexprlist"];
	node73 -> node75;
	node76 [label= "<empty>\n"];
	node75 -> node76;
	node77 [label= "arith_expr"];
	node76 -> node77;
	node78 [label= "arithexprlist"];
	node76 -> node78;
	node79 [label= "<empty>\n"];
	node78 -> node79;
	node80 [label= "term"];
	node79 -> node80;
	node81 [label= "termlist"];
	node79 -> node81;
	node82 [label= "<empty>\n"];
	node81 -> node82;
	node83 [label= "factor"];
	node82 -> node83;
	node84 [label= "factorlist"];
	node82 -> node84;
	node85 [label= "<empty>\n"];
	node84 -> node85;
	node86 [label= "power"];
	node85 -> node86;
	node87 [label= "atom"];
	node86 -> node87;
	node88 [label= "trailerlist"];
	node86 -> node88;
	node89 [label= "<empty>\n"];
	node88 -> node89;
	node90 [label= "NUMBER\n2"];
	node89 -> node90;
	node91 [label= "test"];
	node83 -> node91;
	node92 [label= "or_test"];
	node91 -> node92;
	node93 [label= "and_test"];
	node92 -> node93;
	node94 [label= "ortestlist"];
	node92 -> node94;
	node95 [label= "<empty>\n"];
	node94 -> node95;
	node96 [label= "not_test"];
	node95 -> node96;
	node97 [label= "andtestlist"];
	node95 -> node97;
	node98 [label= "<empty>\n"];
	node97 -> node98;
	node99 [label= "comparison"];
	node98 -> node99;
	node100 [label= "expr"];
	node99 -> node100;
	node101 [label= "compexprlist"];
	node99 -> node101;
	node102 [label= "<empty>\n"];
	node101 -> node102;
	node103 [label= "xor_expr"];
	node102 -> node103;
	node104 [label= "xorexprlist"];
	node102 -> node104;
	node105 [label= "<empty>\n"];
	node104 -> node105;
	node106 [label= "and_expr"];
	node105 -> node106;
	node107 [label= "andexprlist"];
	node105 -> node107;
	node108 [label= "<empty>\n"];
	node107 -> node108;
	node109 [label= "shift_expr"];
	node108 -> node109;
	node110 [label= "shiftexprlist"];
	node108 -> node110;
	node111 [label= "<empty>\n"];
	node110 -> node111;
	node112 [label= "arith_expr"];
	node111 -> node112;
	node113 [label= "arithexprlist"];
	node111 -> node113;
	node114 [label= "<empty>\n"];
	node113 -> node114;
	node115 [label= "term"];
	node114 -> node115;
	node116 [label= "termlist"];
	node114 -> node116;
	node117 [label= "<empty>\n"];
	node116 -> node117;
	node118 [label= "factor"];
	node117 -> node118;
	node119 [label= "factorlist"];
	node117 -> node119;
	node120 [label= "<empty>\n"];
	node119 -> node120;
	node121 [label= "power"];
	node120 -> node121;
	node122 [label= "atom"];
	node121 -> node122;
	node123 [label= "trailerlist"];
	node121 -> node123;
	node124 [label= "<empty>\n"];
	node123 -> node124;
	node125 [label= "NUMBER\n1"];
	node124 -> node125;
	node126 [label= "NAME\n'f'"];
	node118 -> node126;
	node127 [label= "single_stmt"];
	node115 -> node127;
	node128 [label= "stmt"];
	node115 -> node128;
	node129 [label= "compound_stmt"];
	node128 -> node129;
	node130 [label= "funcdef"];
	node129 -> node130;
	node131 [label= "DEF\n'def'"];
	node130 -> node131;
	node132 [label= "NAME\n'f'"];
	node130 -> node132;
	node133 [label= "parameters"];
	node130 -> node133;
	node134 [label= "COLON\n':'"];
	node130 -> node134;
	node135 [label= "suite"];
	node130 -> node135;
	node136 [label= "NEWLINE\n'\n'"];
	node135 -> node136;
	node137 [label= "INDENT"];
	node135 -> node137;
	node138 [label= "stmts"];
	node135 -> node138;
	node139 [label= "DEDENT"];
	node135 -> node139;
	node140 [label= "stmt"];
	node138 -> node140;
	node141 [label= "simple_stmt"];
	node140 -> node141;
	node142 [label= "small_stmts"];
	node141 -> node142;
	node143 [label= "NEWLINE\n'\n'"];
	node141 -> node143;
	node144 [label= "small_stmt"];
	node142 -> node144;
	node145 [label= "print_stmt"];
	node144 -> node145;
	node146 [label= "PRINT\n'print'"];
	node145 -> node146;
	node147 [label= "testlist"];
	node145 -> node147;
	node148 [label= "test"];
	node147 -> node148;
	node149 [label= "or_test"];
	node148 -> node149;
	node150 [label= "and_test"];
	node149 -> node150;
	node151 [label= "ortestlist"];
	node149 -> node151;
	node152 [label= "<empty>\n"];
	node151 -> node152;
	node153 [label= "not_test"];
	node152 -> node153;
	node154 [label= "andtestlist"];
	node152 -> node154;
	node155 [label= "<empty>\n"];
	node154 -> node155;
	node156 [label= "comparison"];
	node155 -> node156;
	node157 [label= "expr"];
	node156 -> node157;
	node158 [label= "compexprlist"];
	node156 -> node158;
	node159 [label= "<empty>\n"];
	node158 -> node159;
	node160 [label= "xor_expr"];
	node159 -> node160;
	node161 [label= "xorexprlist"];
	node159 -> node161;
	node162 [label= "<empty>\n"];
	node161 -> node162;
	node163 [label= "and_expr"];
	node162 -> node163;
	node164 [label= "andexprlist"];
	node162 -> node164;
	node165 [label= "<empty>\n"];
	node164 -> node165;
	node166 [label= "shift_expr"];
	node165 -> node166;
	node167 [label= "shiftexprlist"];
	node165 -> node167;
	node168 [label= "<empty>\n"];
	node167 -> node168;
	node169 [label= "arith_expr"];
	node168 -> node169;
	node170 [label= "arithexprlist"];
	node168 -> node170;
	node171 [label= "<empty>\n"];
	node170 -> node171;
	node172 [label= "term"];
	node171 -> node172;
	node173 [label= "termlist"];
	node171 -> node173;
	node174 [label= "PLUS\n'+'"];
	node173 -> node174;
	node175 [label= "term"];
	node173 -> node175;
	node176 [label= "termlist"];
	node173 -> node176;
	node177 [label= "<empty>\n"];
	node176 -> node177;
	node178 [label= "factor"];
	node177 -> node178;
	node179 [label= "factorlist"];
	node177 -> node179;
	node180 [label= "<empty>\n"];
	node179 -> node180;
	node181 [label= "power"];
	node180 -> node181;
	node182 [label= "atom"];
	node181 -> node182;
	node183 [label= "trailerlist"];
	node181 -> node183;
	node184 [label= "<empty>\n"];
	node183 -> node184;
	node185 [label= "NAME\n'b'"];
	node184 -> node185;
	node186 [label= "factor"];
	node178 -> node186;
	node187 [label= "factorlist"];
	node178 -> node187;
	node188 [label= "<empty>\n"];
	node187 -> node188;
	node189 [label= "power"];
	node188 -> node189;
	node190 [label= "atom"];
	node189 -> node190;
	node191 [label= "trailerlist"];
	node189 -> node191;
	node192 [label= "<empty>\n"];
	node191 -> node192;
	node193 [label= "NAME\n'a'"];
	node192 -> node193;
	node194 [label= "LPAREN\n'('"];
	node172 -> node194;
	node195 [label= "varargslist"];
	node172 -> node195;
	node196 [label= "RPAREN\n')'"];
	node172 -> node196;
	node197 [label= "fpdef"];
	node195 -> node197;
	node198 [label= "fpdeflist"];
	node195 -> node198;
	node199 [label= "COMMA\n'"];
	node195 -> node199;
	node200 [label= "fpdeflist"];
	node198 -> node200;
	node201 [label= "COMMA\n'"];
	node198 -> node201;
	node202 [label= "fpdef\n'"];
	node198 -> node202;
	node203 [label= "NAME\n'b'"];
	node202 -> node203;
	node204 [label= "<empty>\n"];
	node200 -> node204;
	node205 [label= "NAME\n'a'"];
	node204 -> node205;
	node206 [label= "<empty>\n"];
	node166 -> node206;
}
